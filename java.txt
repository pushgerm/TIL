---------------------------------------------------------------
170723

ch1 Let's start java

system.out.printls 실행 이후 자동 개행

---------------------------------------------------------------
170724

ch2 변수와 자료형

자바는 대소문자를 구분한다.
변수의 이름은 숫자로 시작할 수 없다.
$와 _이외의 특수문자는 변수의 이름에 사용할 수 없다.
키워드는 변수의 이름으로 사용할 수 없다.

자바는 short형 끼리 덧셈을 진행할 때 int형으로 바꿔 계산하게 된다
short a=11;
short b=22;
short c=a+b; // a랑 b가 인트형으로 형변환되어 계산하고
이걸 short형 c에 저장하려니 데이터 손실이 있을 수 있어 
에러를 띄우게 된다.
2바이트는 작고 8은 크기때문에 적절한 4바이트를 사용해
연산을 하자고 약속해 int형을 쓰기로 하자.1,2,4,8 다 가능하게 하려면
컴퓨터 성능이 느려지니 int를 기준으로 하기로 약속 되어있다.
계산 값이 얼마던 형이 다르면 손실이 생길 수 있어 에러를 띄운다.
결론 : 왠만하면 int로 선언해서 써라

float은 소숫점 6자리 까지는 오차가 안생기지만 7자리부터 오차가 발생한다.
double은 소숫점 15자리 까지는 오차가 안생기지만 16자리부터 오차가 발생한다.
단 오차는 누적이 되어 연산이 계속되면 없던 오차가 생길 수 있다.
float과 double 사이에서의 자료형 선택 기준은 정밀도 이다.

자바는 문잘르 2바이트 '유니코드'로 표현한다.
작은 따옴표로 묶어서 하나의 문자를 표시한다.
JVM이 유니코드를 가지고 있어 우리가 입력한 문자의 유니코드정보를 전달해준다.
char ch1='헐';  헐 = D5D0
char ch2='확';  확 = D655
char ch3=54736;	헐
char ch4=54869;	확
char ch5= 0xD5D0; 헐
char ch6= 0xD655; 확
ch1 = ch3 = ch5     ch2 = ch4 = ch6

boolean b1 = true;	//'참'을 의미
boolean b2 = false;	//'거짓'을 의미

System.out.println(num1<num2);//num1=10, num2=20 일때 true가 표시됨

-----------------------------------------------------------------------------
170725

ch3 상수와 형 변환

1. 변수의 상수화
final int MAX_SIZE = 100; //final로 상수화 (C++에선 const)
초기화 하지 않을 수도 있음. 그럴 경우 딱 한 번만 별도로 할당가능!!
보편적으로 선언과 동시에 초기화시킴.
상수의 이름은 *모두 대문자*로 짓는 것이 관레.
이름이 둘 이상의 단어로 이뤄질 경우 단어 사이에 _ 언더바로 나타내는게 관례.

2. 진짜 숫자 자체(리터럴)
123; //10진수 표현
0123; //8진수 표현
0x.123; //16진수 표현


숫자가 int형으로 표현하기에 너무 크다! long형 상수로 표현해주라!
4386759238674L<<< long 형으로 표현하라. l or L.
숫자 앞에 0b를 붙이면(0b11010101) 이진수로 표현한다는 것임.
10000000000이 숫자가 가늠이 안되므로 콤마 대신 언더바로 쓴다
100_000_000_000 = 100,000,000,000 이렇게.(필요에 따라 원하는 만큼 끊어도 됨)
3.00004999D f//double은 d, float은 f로 표현. **대소문자 둘 다 가능**
3.4x10 몇승 표현방식 = 3.4e3 = 3400.0
			3.4e-3 = 0.0034
true false도 상수다. //부울형 상수
문자도 상수다. //문자형 상수

escape sequences(이스케이프 시퀀스)
'\b' 백스페이스 문자
'\t' 탭 문자
'\\' 백슬래시 문자
'\'' 작은따옴표 문자
'\"' 큰따옴표 문자
'\n' 개 행 문자
'\r' 캐리지 리턴 문자// 커서가 맨 앞으로 이동 AB->CB
화면사의 어떠한 상황 또는 상태를 표현하기 위해 약속된 문자.


1. 자동 형 변환
왼쪽에 A형 변수, 오른쪽에 B형 변수가 오면 왼쪽의 형에 자동 형 변환이
일어난다.(바꿀수 있다면!!!)
byte -> short(char) -> int -> long -> float -> double
왼쪽에서 오른쪽으론 자동 형변환이 일어남.
59L + 34.5
처음 오른쪽 double형이 long 형으로 가려하나 위 규칙에 위배 되므로
double->long 이 아닌 long -> double 로 변환된다.
정수->실수로 바이트가 클수록 우선시 된다.
***데이터 손실을 최소화 하기 위함****

2. 명시적 형 변환(강제 형 변환)

실수형 double을 정수형 long으로 하고 싶을때
long n1 = 3.14;
long != double 이므로 불가능한 상태.
long n1 = (long)3.14;//숫자 앞에 괄호로 형을 선언해 주면 형 변환 가능.
short num = (short)(num1 + num2); //num1,2를 short형으로 선언했어도
계산 과정에서 int형으로 변환되기 때문에 다시 short형으로 강제 형변환을
해주어야 short형 num에 대입이 가능하다ㅏㅏㅏㅏㅏㅏㅏㅏㅏ

--------------------------------------------------------------------------

ch4. 연산자

1. 자바에서 제공하는 이항 연산자들

short num = 10;
num+=77L;  로 연산하면 컴파일 오류가 떠야하지만 자바가 알아서 형변환 시켜줌

비교연산에도 형변환이 자동으로 일어남 7.0과 7을 비교하면 7이 7.0으로 변환됨

result = (num1 += 10) < 0 ) && ((num2 += 10 ) >0 );
앞에 num1+=10<0 이 false가 되면 &&연산자 때문에 뒷 문장을 처리하지 않고
바로 result에 false를 반환해 num2에 num2+10의 값이 저장되지 않는다.

2. 자바에서 제공하는 단항 연산자들

+ - 등 단항 연산자도 형변환이 필요하다short형 5에 +를 하면 int형으로 바뀐다.
System.out.println//개행포함
System.out.print//개행없음

3. 비틀르 대상으로 하는 연산자들

& : 비트 단위로 AND 연산을 한다.
| : 비트 단위로 OR 연산을 한다.
^ : 비트 단위로 XOR 연산을 한다. 다르면 1 반환.
~ : 피연산자의 모든 비트를 반전시켜서 얻은 결과를 반환.
   n1   : 0 0 0 0 1 1 0 1 = 13
   n2   : 0 0 0 0 0 1 1 1 = 7

n1 & n2 : 0 0 0 0 0 1 0 1 = 5

<< : 피연산자의 비트 열을 왼쪽으로 이동.
	이동에 따른 빈 공간은 0으로 채움.
	n<<2 : 000011 -> 001100
>> : 피연산자의 미트 열을 오른쪽으로 이동
	이동에 따른 빈공간은 음수의 경우 1, 양수의 경우 0으로 채움.
	11111000 -> 11111100;
	0000011 -> 0000001;
>>> : 피연산자의 비트열을 오른쪽으로 이동
이동에 따른 빈 공간은 0으로 채움


-------------------------------------------------------------------------

ch5. 실행 흐름의 컨트롤

1. if 그리고 else

조건 연산자(삼항연산자) : 
조건 ? 수1:수2;
TorF? true  false


2. switch 와 break

switch(n){
case 1:
case 2:
default:
}
해당 case 부터 밑의 모든 문장을 실행한다. 끊고싶다면? break를 써야한다.
switch(n){
case 1:
case 2:
case 3:
	system.out.println();
default:
위와 같은 경우는 1,2,3중 어떤값을 넣어도 3이 실행된다.


3. for, while 그리고 do ~ while

do{

}while(num<5);


4. break & continue
빠져나가기 & 계속하기
(반복문 탈출) & (위에서부터 계속)(조건검사)

while(n<100){
if(x==20)
break;
}

break를 발견한 순간 while문을 탈출한다

while(n<100){
if(n==20)
continue;
ㅇㅇㅇ
ㅇㅇ
ㅇㅇ
}
continue를 만나면 밑에 있는 문장들을 건너뛰고 *조건검사*로 이동한다.


5. 반복문의 중첩


-------------------------------------------------------------------------

ch6. 메소드와 변수의 스코프


1. 메소드에 대한 이해와 메소드의 정의

메소드 : 기능상자.
메소드 이름이 main인 이유는? 자바에서 정한 규칙 : 프로그램의 시작은 main에서 부터.
선언 :
public static void main(String[] args){}
return; //중간에 왔을 때 값의 반환 없이 메소드만 종료.

2. 변수의 스코프(지역변수)


3. 메소드의 재귀 호출

재귀를 하면 함수 하나를 여러번 사용하는게 아니라 함수의 복사본을 만들어
새로운 복사본을 이용하기 때문에 재귀가 가능하다.

-----------------------------------------------------------------------

ch7. 클래스와 인스턴스


1. 클래스의 정의와 인스턴스(객체)의 생성

프로그램 = 데이터 + 기능
데이터 : 프로그램상에서 유지하고 관리해야 할 데이터
기능 : 데이터를 처리하고 조작하는 기능

클래스 : 틀
인스턴스 : 객체
BankAccount account1;//참조변수 account1 선언
account1 = new BankAccount();
new BankAccount()로 인스턴스를 생성해 주소값을 반환하면 account1에 
주소값을 저장한다. 이를 위해 BankAccount()로 참조변수를 선언해준다.

접근 : account1.withdraw(1000);

2. 생성자와 String 클래스의 소개

"hello" //인스턴스
문자열을 보는 순간 문자열의 인스턴스를 생성하고 문자열을 넣어준다.
그리고 인스턴스의 주소값을 반환해준다.
System.out.println("ㅇㅇㅇ");
ㅇㅇㅇ이 전달되는게 아니라 ㅇㅇㅇ 이 저장된 인스턴스의 주소값이 전달된것이다.
String str1 = "happy";
str1에 문자열이 저장된 인스턴스의 주소값을 가지고 있다.
그래서 System.out.println(str1);이 가능하다.

클래스 정의 모델 : 인스턴스 구분에 필요한 정보를 갖게 하자.
//String name; 이런식으로 이름 데이터를 넣어준다.(계좌번호, 주민등록번호 등)

인스턴스를 만들면 초기화를 해주자.
public void initAccount(String acc, String ss, int bal){
accNum = acc;
ssNum = ss;
balance = bal; //계좌 개설시 예금액으로 초기화
}
public static void main(String[] args){
BankAccount yoon = new BankAccount();
yoon.initAccount("12-34-89", "990990-990990", 10000);
}

초기화를 위한 생성자를 java는 자동으로 진행한다.
생성자
public BackAccount(String acc, String ss, int bal){
accNumber = acc;
ssNumber = ss;
balance = bal;
}
생성자의 이름은 클래스의 이름과 동일해야 한다.
생성자는 값을 반환하지 않고 반환형도 표시하지 않는다.
public static void main(String[] args){
BankAccount yoon = new BankAccount("12-34-90", "990909-909090", 10000);
}

디폴트 생성자
생성자를 넣지 않으면
자동으로 '디폴트 생성자'를 넣어준다
public BankAccount(){
//empty
}//디폴트 생성자

3. 자바의 이름 규칙

클래스 이름의 첫 문자는 대문자로 시작한다.(Circle)
둘 이상의 단어가 묶여서 하나의 이름을 이룰 때, 새로 시작하는 단어는 대문자로 한다.( CirclePoint)//Camel Case모델 (낙타)

메소드와 변수의 이름규칙
메소드 및 변수 이름의 첫 문자는 소문자로 시작한다.
둘 이상의 단어가 묶여서 하나의 이름을 이룰 때, 새로 시작하는 단어는 대문자로 한다.
Add Your Money = addYourMoney
변형된 camel case 모델

상수의 이름규칙
상수의 이름은 모든 문자를 대문자로 구성한다.
둘 이상의 단어가 묶여서 하나의 이름을 이룰 때 단어 사이를 언더바로 연결한다.
final int COLOR_RAINBOW = 7;

-------------------------------------------------------------------------

ch8. 패키지와 클래스 패스


1. 클래스 패스

.java안에 여러개의 클래스가 있으면 컴파일을 하면 각각 a.class의 파일을 생성한다.
그 중에 하나는 main메소드를 가지고 있어야한다.
javac s.java 를 하면
A.class, B.class 파일이 생성된다
java A 를 실행하면 A의 main메소드를 실행하게 된다.

그렇다면 A.class, B.class를 하위 디렉토리를 만들어 넣는다면?
자바에선 클래스패스를 추가할 수 있다.
set classpath //클래스 패스가 지정되어 있는지 확인.
cmd끄면 날아간다.
set classpath=.;C:\dir //디렉토리 추가
	      이 마침표는 현재 디렉토리를 의미한다.
새로운 클래스 패스를 지정해 주면 기존 기본적으로 되어 있던 디렉토리에서
파일을 찾지 않아 현재 기본 디렉토리도 추가로 설정을 해줘야 한다.

set classpach=.;.\myclass //두번째 마침표는 현재 디렉토리르 의미함
			결국 현재 디렉토리를 직접 쓸 필요가 없음.//상대경로
클래스패스를 고정시키는 방법(좋은방법 아님 하지말것)
변수 이름으로 classpath
변수값으로 경로정보 전달하면 클래스 패스가 시스템 전체에 적용
좋은 방법 아니므로 알고만 있을것


2. 패키지의 이해

공간에서의 충돌//동일 이름의 클래스 파일을 같은 위치에 둘 수 없다.
접근 방법에서의 충돌//인스턴스생성 방법에서 두 클래스에 차이가 없다(이름이 같아서 어떤 파일을 원하는지 모름)

해결
클래스 접근방법의 구분 : 서로 다른 패키지의 두 클래스는 인스턴스 생성 시 사용하는 이름이 다르다.

클래스의 공간적인 구분 : 서로 다른 패키지의 두 클래스 파일은 저장되는 위치가 다르다.

package com.wxfx.smart; 라고 클래스 위에 선언을 해준다.
패키지 이름은 모두 소문자로 구성
인터넷 도메인 이름의 역순으로 이름을 구성
이름 끝에 클래스를 정의한 주체 또는 팀의 이름 추가(smart)
생성은
com.wxfx.smart.corcle c1 = new com.wxfx.smart.Circle(3.5);//이렇게 생성
com wxfx smart 모두 디렉토리임
자바 가상머신은 위 디렉터리들로 들어가 클래스를 찾는다.
javac -d <directory> <filename> 을 하면 패키지 디렉토리를 자동으로 생성한다.
javac -d . src\circle1\circle.java
인스턴스 생성할 때마다 다 써주기 귀찮으니까
import com.wxfx.smart.Circle; 이라고 쓰면
앞으로 쓰는 Circle은 앞의 디렉토리에 있는 Circle을 쓴다는걸로 의미한다.
import com.wxfx.smart.*; 패키지안의 모든 파일을 import한다.
단 한 패키지 안에 수십개 수백개의 클래스가 있을 수 있어 같은 이름의 충돌이 일어날 수 있으므로 잘 쓰진 않는다.

------------------------------------------------------------------------------

ch9. 정보 은닉 그리고 캡슐화

1. 정보은닉

private double rad = 0 ; //정보은닉.
데이터의 직접적 접근은 좋지 않다. 접근 가능한 메소드를 만들어주자.

2. 접근 수준 지시자( 3 + 1 )

public, protected, default, private

public class AAA{}//public 클래스 : 어디서든 인스턴스 생성이 가능하다. 파일의 이름을 클래스의 이름과 일치시켜야 한다. AAA.java
class ZZZ{} //default 클래스 : 동일 패키지로 묶인 클래스 내에서만 인스턴스 생성을 허용한다.

cat.java
package zoo;
class Duck{}
public class Cat { Duck quack = new Duck();}//접근가능 디폴트 생성자지만 같은 패키지 안에 있기 때문

package animal;
public class Dog{
zoo.Cat yaong = new zoo.Cat();//가능 Cat이 public 이기 때문.
zoo.Duck quack = new zoo.Duck();//Duck이 default라 다른 패키지에선 선언 불가. 패키지 이름을 zoo로 바꿔주면 가능

class AAA{
public int num1;//외부 접근 가능
protected int num2; //
private int num3; //외부 접근 불가
int num4; //default 선언 //동일 패키지로 묶인 클래스 내에서만 접근 가능

extends //상속을 의미
public class ZZZ extends AAA{}// zzz안에 AAA를 둔다 
extends AAA : AAA를 상속하겠다.

패키지 선언이 안된 클래스들은 '디폴트 패키지'끼리 묶인다. 결국 한 패키지로 묶인다는 것이다.

protected : 같은 패키지가 아니지만  상속관계에서 접근을 허용하겠다.

지시자	클래스 내무	동일 패키지	상속 받은 클래스	이외의 영역

private	      o		     x			x		     x

default       o		     o			x		     x

protected     o              o                  o                    x

public        o              o                  o                    o

3. 캡슐화

C++이랑 같음.


------------------------------------------------------------------------------

10. 클래스 변수와 클래스 메소드

# 1. static 선언을 붙여서 선언하는 클래스 변수

- 자바는 클래스의 집합으로 이루어져 있어 클래스 밖에 변수를 선언할 수 없다.

- static int num;//으로 붙여서 클래스 내에 선언하면 프로그램 전체에서 공유가 가능하다.

- C++의 전역변수와 비슷하다. 접근 지시자의 규칙도 따른다.

- static final double PI = 3.1415//파이값은 고정되어 있고 여러클래스에서 쓸 수 있으므로 static선언을 해준다.


# 2. static선언을 붙여서 정의하는 클래스 메소드

접근 할 때 클래스 인스턴스로 접근하지말고 클래스 자체로 접근하다

static선언이 붙은 클래스 메소드는 인스턴스와 다른 위치에 있다.
그래서 static이 붙지 않은 인스턴스 내의 변수에 접근할 수 없다.

# 3. System.out.println() 그리고 public static void main() 

System : 클래스 이름
out : static 클래스 변수(참조변수)
println : 메소드

System은 java.lang에 묶여있는 클래스이다(패키지)
import java.lang.*; JVM이 자동으로 선언해준다.

static 붙이는 이유 : 인스턴스 생성과 관계없이 제일 먼저 호출되는 메소드 이다.
public인  이유 : main 메소드의 호출 명령은 외부로부터 시작되는 명령이다. 단순히 일종의 약속으로 이해하자.

main은 static 때문에 어느 클래스에 넣어도 상관 없다. 보통 main을 담는 클래스를 만든다.

# 4. 또 다른 용도의 static 선언

static 초기화 블록
class DateOfExecution{
	static String date;
static{
	LocalDate nDate = LoalDate.now();
	date = nDate.toString();
}
//값을 얻어와 static 변수를 초기화 하기위해 static 블럭을 이용한다.

System.out.println(Math.PI);
improt static java.lang.Math.PI//이렇게 임포트 해주면
System.out.println(PI); 로 쓸 수 있다. 추가된 문법이긴 하지만 아직까지 이렇게 쓰는건 보편적이지 않다. 출처를 같이 명시해주는게 흐름이다.

------------------------------------------------------------------------------

ch11. 메소드 오버로딩과 String 클래스

# 1. 메소드 오버로딩

호출된 메소드를 찾을 때 참조하게 되는 두 가지 정보
- 메소드의 이름
- 메소드의 매개변수 정보
//반환형은 아니다.
따라서 이 둘 중 하나의 형태가 다른 메소드를 정의하는 것이 가능하다.

class MyHome{
	void mySimpleRoom(int n);
	void mySimpleRoom(int n1, int n2);
	void mySimpleRoom(double d1, double d2);
}
이름은 같고 매개변수 선언이 다른 메소드의 선언을 허용한다!!!매개변수의 수, TYPE이 달라야 한다. 반환형이 다른건 오버로딩의 조건이 아니다.
이것이 바로 **메소드 오버로딩**

- 생성자도 여러개 만들어 오버로딩 시킬 수 있다.

this(rnum, 0);
키워드 this는 이 인스턴스를 뜻한다.
Person p = new Person(5);
이 인스턴스의 생성자가 여러개 일 때 오버로딩 된 다른 생성자를 호출
Person(int  rnum, int pnum){
	refiNum = rnum;
	passNum = pnum;
}
Person(int rnum){
	refiNum = rnum;
	passNum = pnum;
}
이런 오버로딩 된 생성자가 있을 때
밑의 생성자의 코드 대신
Person(int rnum){
	this(rnum, 0);
}
을 써준다. 여기서 this란 rnum과 0을 인자로 받을 수 있는 오버로딩 된 다른 생성자를 호출한다는 의미이다. 중복된 코드를 줄이는 효과가 있다.

**this는 C++과 마찬가지로 this.data등 인스턴스 변수를 의미할수도 있다.


# 2. String 클래스

String str1 = new String("Simple String");
String str2 = "The Best String";
둘 다 String 인스턴스의 생성으로 이어지고 그 결과 인스턴스의 참조 값이 반환된다.

ptrintln("str"); 이 경우도 str의 인스턴스를 생성해 주소값을 반환한다.

String 인스턴스는Immutable 인스턴스. 값을 바꿀 수 없다.
따라서 생성되는 인스턴스의 수를 최소화 한다.
String str1 = "Simple String";
String str2 = "Simple String";// == String str2 = str1 //이렇게 구성된다.

String str1 = new String("Simle String"); //이건 새로운 영역을 만들고 주소값을 반환해 중복되지 않는다.

switch 문에서 문자열을 받기도 한다.

# 3. String 클래스의 메소드

length() : 문자열의 길이를 반환하는 메소드
"ABC".length(); : 3을 반환해 줌.

concat(String str)
String st3 = st1.concat(st2) : st1과 st2의 문자열을 합쳐서 st3을 만들어 낸다.
String st4 = "Fresh".concat(st3) : Fresh st3으로 붙어서 저장된다.

substring(int n)
str = "abcdefg"
str.substring(2); : 인덱스 2 이후의 내용으로 이뤄진 문자열 "cdefg" 반환
str. substring(2, 4); : 매개변수가 두 개. 2에서 4앞 까지(3까지) "cd"

equals(string str)
st1.equals(st2) : st1 과 st2의 *내용*이 같으면 True 반환

st1.compareTo(st2) : *내용* 이 같으면 0 반환
		st1 이 사전편찬 순서상 st2보다 앞서면 음수를 크면 양수를 반환.
	음수	0	양수
st1이먼저나옴  같음   st2가 먼저나옴

st1.compareToIgnoreCase(st2) // 대소문자를 구분하지 않고 내용을 비교한다.

valueOf(TYPE str) : 데이터 값을 문자열 인스턴스로 반환한다.
double e = 2.718281;
String se = String.ValueOf(e);
2.718281 을 "2.718281" 의 문자열로 반환.
valueOf 메소드는 static으로 선언되어 있어 인스턴스가 아닌 클래스로 호출한다.

System.out.println("funny" + "camp");
= System.out.println("funny".concat("camp"));
이렇게 변환되어 나옴.

str += "camp";
= str = str.concat("camp")
새로운 문자열을 만들어 새로 참조한다.//좋은 문법은 아니지만 문법적으로 의미가 있으니 알아두도록 하자.

String str = "age : " + 17;
=> String str = "age : ".concat(17); 불가!!!! concat메소드는 String 인스턴스만 인자로 전달 받을 수 있다.
=> String str = "age : ".concat(String.valueOf(17)); //이런식으로.바꿔준다.

String str = "AB".concat("CD").concat("EF");
=> String str = ("AB".concat("CD")).concat("EF");
=> String str = "ABCD".concat("EF");
=> String str = "ABCDEF";

String birth = "<양>" + 7 + '.' + 16;
=> String bitrh = "<양>".concat(String.valueOf(7)).concat(String.valueof('.')).concat(String.valueOf(16));
너무 과도한 String 인스턴스 생성으로 이어진다. 따라서 컴파일러는 이렇게 변환하지 않는다.
=> String birth = (new StringBuilder("<양>").append(7).appent('.').append(16)).toString();

StringBuilder : 저장만 할 수 있는 저장공간이 있다.
앞에서부터 <양>7.16 으로 위 데이터를 그대로 이어붙여버린다.마지막 toString()메소드를 호출하는 순간에 이어붙여진 데이터를 문자열로 새로운 주소에 만들어 그 값을 참조하게된다.

예제
StringBuilder stbuf = new String Builder("123");
stbuf.appent(45678); // 12345678 출력(문자열 덧붙이기)
stbuf.delete(0,2); //345678 ( 문자열 일부 삭제. 0부터 2 앞까지)
stbuf.replace(0,3,"AB"); AB678 (분자열 일부 교체.0부터 3앞까지를 AB로 교체)
stbuf.reverse();//문자열 내용 뒤집기
String sub = stbuf.substring(2,4); //6B 일부만 문자열로 반환(2부터 4앞까지)

StringBuffer
StringBuffer와 StringBuilder는 기능적으로는 완전히 동일하다. 즉 다음 세 가지가 일치한다.
- 생성자를 포함한 메소드의 수
- 메소드의 기능
- 메소드의 이름과 매개변수의 선언

But
- StringBuffer 는 쓰레드에 안전하다.
- 따라서 쓰레드 안전성이 불필요한 상황에서 StringBuffer를 사용하면 성능의 저하만 유발하게 된다.(속도가 느리다)
- 그래서 StringBuilder 가 등장하게 되었다.(속도는 빠르지만 쓰레드에 안전하진 않다)


-----------------------------------------------------------------------------

ch12. 콘솔 입력과 출력

# 1. 콘솔 출력

콘솔 : 키보드 마우스 모니터

System.out.println 

toString 메소드
앞서 인스턴스 내에 이어 붙였던 문자열을 새로운 공간에 String문자열로 만들어 주소값을 반환한다.

printf 메소드
조합이 가능하다.//C와 유사

System.out.printf("정수는 %d, 실수는 %f, 문자는 %c", 12, 24.5, 'A');
서식 지정자.
%d : 10진수 정수 형태의 출력
%o : 8진수 정수 형태의 출력
%x : 16진수 정수 형태의 출력
%f : 실수의 출력
%e : e 표기법 기반의 실수 출력
%g : 출력의 대상에 따라서 %e 또는 %f 형태의 출력
%s : 문자열 출력
%c : 문자 출력

# 2. 콘솔 입력

Scanner 클래스
데이터를 읽어들인다. 파일, 키보드, 인스턴스등으로부터 데이터를 읽어들일 수 있다.
공백을 기준으로 나눈다.
Scanner sc = new Scanner(source); 1 2 3 
int num1 = sc.nextInt();// 1 읽음
int num2 = sc.nextInt();// 2 읽음
int num3 = sc.nextInt();// 3 읽음

scanner 클래스의 키보드 적용
System.in// in : 키보드

Scanner sc = new Scanner(System.in);
int num1 = sc.nextInt(); 입력이 없었으면 여기서 입력이 들어올때까지 기다림
Scanner 인스턴스 생성 이후에 데이터를 스캔하는 방법에 있어서는 차이가 없다. 즉 연결 대상에 의존적이지 않은 코드의 작성이 가능하다.
다른 TYPE을 읽을 수 있음.

int nextInt();
byte nextByte();
String nextLine();
double nextDouble();
boolean nextBoolean();

-------------------------------------------------------------------------

ch13. 배열

# 1. 1차원 배열의 이해와 활용

1차원 배열이란? 타입이 같은 둘 이상의 데이터를 저장할 수 있는 1차원 구조의 메모리 공간

1차원 배열의 선언 방법 : int[] ref = new int[5];

배열도 인스턴스다. length라는 멤버변수도 있다.(직접 접근 가능)

클래스를 타입으로서 배열을 만들 수 있다.

배열 요소는 반복문을 통해 순차적 접근이 가능하며, 이것은 배열이 가진 큰 장점 중 하나이다.

배열 생성
int[] arr = new int[3]; 이 방법을 선호함.
int arr[] = new int[3];

배열 생성 및 초기화1
int[] arr = new int[]{1, 2, 3};//배열의 길이를 컴파일러가 알아서 정할 수 있도록 생략해준다.

배열 생성 및 초기화2
int[] arr = {1, 2, 3};

int[] 인트형 배열! 반환형으로도 쓸 수 있다.

배열의 디폴트 초기화

기본 자료형 배열은 보든 요소 0으로 초기화

인스턴스 배열은 모든 요소 null로 초기화

원하는걸로 초기화는?
public static void fill(int[] a, int val) : 두 번째 인자로 전달된 값으로 배열 초기화
public static void fill(int[] a, int fromIndex, int toIndex, int val) : fromIndex부터 시작해서 toIndex의 앞까지 val로 채운다.
//java.lang.Arrays 클래스에 정의되어 있다.

public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) : src의 srcPos부터  dest의 destPos의 위치부터 length 개 만큼 복사한다.

# 2. enhanced for 문(for-each문)

int[] ar = {1, 2, 3, 4, 5};
for(int i=0; i < ar.length; i++){
	System.out.pringln(ar[i]);
} 이 코드를 밑에 코드로 구성한다.

int ar[] = {1, 2, 3, 4, 5};
for(int e : ar){	//ar을 대상으로 순차적으로 e에 저장해서 for문을 실행한다.

	System.out.println(e);
}//코드의 양이 줄고 배열의 길이와 요소에 신경 쓸 필요 없다.


# 3. 다차원 배열의 이해와 활용

int[][] arr2 = new int [3][4]; 3이 2차, 4가 1차.길이가 4인 배열을 3줄 만들겠다.(세로가 3 가로가 4)

int[][][] arr3 = new int [5][3][4];

2차원 배열은 for문의 중첩으로 접근한다.

2차원 배열의 구조
int [][] arr = new int [3][4];
arr[0] ----> ㅁㅁㅁㅁ
arr[1] ----> ㅁㅁㅁㅁ
arr[2] ----> ㅁㅁㅁㅁ
arr[3]의 배열이 하나의 인스턴스로 묶여있고 각각의 멤버변수가 길이가 4인 인스턴스의 참조값을 가지고 있다. arr은 arr[3]의 인스턴스의 참조값을 가지고 있다.

초기화
int[][] arr = {
	{1, 2, 3},
	{4, 5, 6},
	{7, 8, 9}
};//3x3배열
intp[][] arr2={
	{1},
	{2, 3};
	{4, 5, 6};
};//그냥 각 줄마다 길이가 다른 배열.

arr.length : 세로 길이 참조
arr[i].length : 가로 길이 참조


---------------------------------------------------------------------------

ch14. 클래스의 상속 1 : 상속의 기본

# 1. 상속의 기본 문법 이해

코드의 재활용을 위한 문법입니다.(x)
연관된 일련의 클래스들에 대해 공통적인 규약을 정의할 수 있습니다.(o)

class BusninessMan extends Man{}//extends [class] 로 상속한다.
private영역은 상속을 해도 접근할 수 없다.

하위클래스의 생성자에서 상위클래스 생성자를 호출할 때!
super( )를 쓴다.
오버로딩 가능하며 하위클래스생성자의 첫 문장에 넣어주면 된다.

**자바는 다중 상속을 지원하지 않는다.//가능한 다른 언어가 있지만 장점보다 단점이 많아 잘 사용하지 않는다.
한 클래스에서 상속할 수 있는 최대 클래스의 수는 한 개이다.


# 2. 클래스 변수, 클래스 메소드와 상속

static 변수는 상속 되는가?
프로그램 전체에서 딱 하나만 존재하는데 상속의 대상이 되겠는가?
private이 아니라면 접근만은 가능하다.

--------------------------------------------------------------------------

ch15. 클래스의 상속2 : 오버라이딩

# 1. 상속을 위한 두 클래스의 관계

상속의 특성 : 하위 클래스는 상위 클래스의 모든 특성을 지닌다. 거기에 더하여 하위 클래스는 자신만의 추가적인 특성을 더하게 된다.

# 2. 메소드 오버라이딩

상위클래스로 하위클래스를 참조할 수 있지만 하위 클래스로 상위 클래스를 참조할 수는 없다.
상위->하위(o) 핸드폰->스마트폰
하위->상위(x) 스마트폰->핸드폰

상위클래스에서 하위클래스로 접근을 하면 상위클래스의 멤버밖에 접근이 안된다.

class SmartPhone extends MobilePhone{,,}
스마트폰은 모바일폰이다.

SmartPhone phone = new SmartPhone("010", "kim");
따라서 스마트폰 찹조변수로 스마트폰 참조 가능하고
역은 성립하지 않는다.
MobilePhone phone = new SmartPhone("010", "kim"); (x) 

class cake{}
class CheeseCake extends Cake{}

CheeseCake ca1 = new Cheese Cake();
Cake ca2 = ca2 ; //가능

Cake ca3 = new CheeseCake();
CheeseCake ca4 = ca3; //불가능//이 시점에 컴파일러 및 가상머신은 ca3가 참조하는 대상을 Cake인스턴스로 판단한다! ca3가 참조하는 인스턴스의 정확한 클래스 정보는 유지하지 않는다.

배열로도 확장된다
CheeseCake[] cakes = new CheeseCake[10];
Cake[] cakes = new CheeseCake[10];

메소드 오버라이딩
class Cake{
public void yummy(){...}
}
class CheeseCake extends Cake{
public void yummy(){ ...}
}
오버라이딩 관계
CheeseCake의 yummy 메소드가 Cake의 Yummy메소드를 오버라이딩!
Cake로 Cheesecake를 만들면 CheeseCake내의 Cake에만 접근이 가능하다.
CheeseCake가 한거고 Cake가 당한것이다. CheeseCake가 Cake을 가려서 Cake를 호출해도 CheeseCake가 호출된다.
단 Cake c1 = new Cake(); 이면 당연히 Cake의 yummy가 호출된다.
CheeseCake의 yummy는 Cake의 yummy를 호출할 수 있다.
super : 이 클래스를 상속하는 부모클래스.
super.yummy() 로 상위클래스에 접근 가능.
클래스 변수는 오바라이디 ㅇ되지 않는다.

# 3. istanceof 연산자
ref instanceof className
참조변수       클래스명
왼쪽의 인스턴스가 오른쪽의 클래스명으로 참조가 가능하느냐? 가능하면 TRUE, 아니면 FALSE

public static void main(String[] args){
Box box1 = new Box();
PaperBox box2 = new Paper Box();
GoldPaperBox box3 = new GoldPaperBox();

wrapBox(box1);
wrapBox(box2);
wrapBox(box3);
}

public static void wrapBox(Box box){
if(box instanceof GoldPaperBox){
((GoldPaperBox)box).goldWrap();
}
else if(box instanceof PaperBox){
((Paperbox)box).paperWrap();
}
else {
box.sㅑmpleWrap();
}
}
각 클래스별로 함수의 이름을 달리하면 이렇게 긴 코드를 써야하지만 같은 메소드로 오버라이딩 시키면
box.wrap()한문장이면 된다.

------------------------------------------------------------------------------

ch16. 클래스의 상속 2 : 상속의 목적

# 1. 상속이 도움이 되는 상황의 소개

CompFriend와 UnivFriend 클래스가 분리되어 있다.
공통된 부분을 Friend로 묶어 상속하게 한다.
Friend클래스의 함수와 하위 클래스의 함수를 오버라이딩 시킨다.
Friend friend = new CompFriend(); 로 선언해주고
friend의 메소드를 호출하면 오버라이딩 되어 compFriend의 메소드를 실행하고 compFriend의 수현에서 super.상위() 를 통해 상위 메소드를 실행시켜준다.

# 2. Object 클래스와 final 선언 그리고 @Override

class MyClass{} 상속하는 클래스가 없다면 컴파일러에 의해 다음과 같이 java.lang.Object클래스를 상속하게 코드가 구성된다.

class MyClass extends Object{}

그래서 다음과 같은게 가능하다.
public void println(Object x){
String s = x.toString();
}

toString 메소드는 Object클래스의 멤버메소드였다.

클래스와 메소드의 final 선언
public final class MyLastClass{} : MyLastClass 클래스는 다른 클래스가 상속할 수 없음.

public final void func(int n ){} : 이 메소드는 다른 클래스에서 오버라이딩 할 수 없음.

class ChildAdder Extends ParentAdder{
@Override
public double add(double a, double b){}
}
@Override : 이 메소드는 오버라이딩 하는거야! 안전성 부여. 상위 클래스의 메소드를 오버라이딩 하는 것이 목적이라는 선언. 오버라이딩을 하는 형태가 아니면 컴파일러가 오류 메시지 전달.


---------------------------------------------------------------------------

ch17. 인터페이스와 추상클래스


# 1. 인터페이스의 기본과 그 의미

인터페이스 : 통신방법, 도구, 수단. 기능 활용 방법

interface Printable{
	public void print(String doc);
} : 인터페이스의 정의. 메소드의몸체를 갖지 않는다. 따라서 인스턴스 생성 불가. 참조변수 선언가능//추상메소드

class Printer implements Printable{
	public void print(String doc){
		System.out.println(doc);
	}
}: Printer 는 Printable을 구현한다.
//인터페이스를 구현하는 클래스! 구현하는 메소드와 추상 메소드 사이에도 메소드 오버라이딩 관계 성립. 따라서 @Override 붙일 수 있음.

Printable prn = new Printer();
Printable의 인스턴스는 Printable을 상속하는 클래스의 인스턴스를 참조할 수 있다.

Printer에 아무리 많은 메소드가 있어도 Printable이 접근할 수 있는 범위는 자신의 메소드밖에 없다.

오버라이딩과 유사하다고 생각하면 된다.
상속과 별개로 인터페이스를 구현할 수 있다.
class Robot extends Machine implements Movable, Runnable{}

# 2. 인터페이스의 문법 구성과 추상 클래스

interface Printable{
	public void print(String doc);
}//public안해도 기본 public으로 인식한다.
interface Printable{
	public static final int PAPER_WIDTH = 70;//인스턴스가 없으니 변수생성이 불가능하지만 상수 선언은 가능하다.
}//역시 public static final이 없어도 있는걸로 간주한다.(자동선언)

인터페이스도 상속이 가능하다.
interface Printable{}
interface ColorPrintable extends Printable{} 상속을통해 흑백프린터는 printable을 쓰고 칼라프린터는  ColorPrintable을 가져다 쓰면 된다.

총 256개의 인터페이스가 존재하는데 모든 인터페이스에 다음 추상 메소드를 추가해야 한다면?
void printCMYK(String doc);
다음 디폴트 메소드로 이문제를 해결하면 인터페이스의 수가 늘어나지 않는다.
default void printCMYK(String doc){}
구현해도 되고 안해도 그만이다.

interface Printable{
	void print(String doc);
} 이랬던 인터페이스를

interface Printable{
	void print(String doc);
	default void printCMYK(String doc){}
}
이렇게 바꿔주면 default 선언된 메소드는 하위에서 구현해도 되고 구현하지 않아도 상관없어 넘어갈 수 있다.

static메소드도 인터페이스 안에 선언할수 있다.

인터페이스 대상의 instanceof 연산
if ( ca instanceof Cake) //ca가 참조하는 인스턴스가 Cake를 구현하는 클래스를 의 인스턴스이면 true를 반환한다.또는 Cake를 직접 구현하진 않지만 간접구현(간접 상속) 하는 클래스의 인스턴스여도 true를 반환한다.

Cake는 클래스의 이름도, 인터페이스의 이름도 될 수 있다.
ca가 참조하는 인스턴스를 Cake형 참조변수로 참조할 수 있으며 true반환.
ca가 참조하는 인스턴스가 Cake를 직접 혹은 간접적으로 구현한 클래스의 인스턴스인 경우 true 반환

interface Printable{}
class SimplePrinter implements Printable{}
class Multiprinter extends SimplePrinter{}
이 있을때
Printable prn1 = new SimplePrinter();
Printable prn2 = new MultiPrinter();
prn1 instanceof Printable //ture반환
prn2 instanceof Printable //true반환

Maker인터페이스.(표시하는 인터페이스)
interface Upper{} //본체가 없음//마커인터페이스
interface Lower{} //역시 마커인터페이스
class Report implements Printable, Upper{} Upper에 본체가 없는데 implement했다.

public void printContents(Printable doc){
	if(doc instanceof Upper){
		System.out.println(doc. getContents()).toUpperCase());
	}
	else if(doc instanceof Lower){
		System.out.println((doc.getContents()).toLowerCase());
	}
}마커인터페이스에 따라 호출문장이 달라진다.
클래스에 특정 표시를 해 두기 위한 목적으로 정의된 인터페이스를 마커 인터페이스라 한다. 마커 인터페이스에는 구현해야 할 메소드가 없는 경우가 흔하다.

추상클래스

public abstract class House{
	public void methodOne(){}
	public abstract void methodTwo();
}
하나 이상의 추상 메소드를 지니는 클래스를 가리켜 추상 클래스라 한다.
그리고 추상 클래스를 대상으로는 인스턴스 생성이 불가능하다. 물론 참조변수 선언은 가능하다.
클래스를 만든 사람이 이 클래스를 인스턴스를 만들어 쓰지 않고 상속하여 사용자가 구현해 쓰길 바랄때 쓴다.

----------------------------------------------------------------------------

ch18. 예외처리

# 1. 자바 예외처리의 기본

예외(Exception)
'예외적인 상황'을 줄여서 '예외'라 한다.
단순한 문법 오류가 아닌 실행 중간에 발생하는 '정상적이지 않은(예기치 못한) 상황'을 뜻한다.

예외처리
예외 상황에 대한 처리를 의미한다.
자바는 예외처리 메커니즘을 제공한다.

예외 상황을 알리기 위한 클래스
java.lang.ArithmeticException
->수학 연산에서의 오류 상황을 의미하는 예외 클래스

java.util.InputMismatchException
->클래스 Scanner를 통한 값의 입력에서의 오류 상황을 의미하는 예외 클래스

try{
	관찰영역
}
catch(ArithmeticException e){
	처리영역
}
예외의 처리를 위한 코드를 별도로 구분하기 위해 디자인된 예외처리 메커니즘이 try ~ catch 이다.


try{
	System.out.print("a/b...a?");
	int n1 = kn.nextInt();
	System.out.print("a/b...b?");
	int n2 = kb.nextInt();
	System.out.printf("%d", n1/n2);
}
catch(ArithmeticException e){
	e.getMessage();
}
catch(InputMismatchException e){
	e.getMessage();
}
//캐치문은 두 개 이상 연달아 사용할 수 있다.
catch(ArithmeticException | InputMismatchExceprion e){
	e.getMessage();
}
//하나의 캐치문에 이렇게 넣을 수 있음.

자바 가상머신이 try에서 오류를 감지하면 컴파일이 일시정지 되면서 오류문이 try에서 발견되었는지 확인한다. 확인이 되면 오류에 관한 인스턴스를 생성하고 catch의 매개변수에 이 오류 인스턴스의 참조값을 넘겨준다. 그다음 catch의 몸체에 있는 내용을 실행하게 된다. try 중간에서 오류가 났다면 try전체를 건너뛰고 컴파일을 다시 진행한다. 그러무로 try는 일의 단위로 묶어준다.(여기서부터 여기까진 오류가 발생할것같은 단위)

Throwable 클래스

java.lang.Throwable 클래스
-> 모든 예외 클래스의 최상위 클래스 : 물론 Throwable도 Object를 상속한다.

Throwable 클래스의 메소드 둘
public String getMessage() : 예외의 원인을 담고 있는 문자열을 반환
public void printStackTrace() : 예외가 발생한 위치와 호출된 메소드의 정보를 출력

# 2. 예외처리에 대한 나머지 설명들

예외클래스의 구분

               Throwable클래스(상위)
Error, Exception, RuntimeException 클래스(하위)

Error클래스를 상속하는 예외 클래스들의 특성
Error클래스를 상속하는 예외 클래스의 예외 상황은 시스템 오류 수준의 예외 상황으로 프로그램 내에서 처리 할 수 있는 수준의 예외가 아니다
ex) VirtualMachineError : 가상머신에 심각한 오류 발생
IOError : 입출력 관련해서 코드 수준 복구가 불가능한 오류 발생

RuntimeException 클래스를 상속하는 예외 클래스들의 특성
코드 오류로 발생하는 경우가 대부분이다. 따라서 이 유형의 예외 발생시 코드의 수정을 고려해야 한다.
ex) NegativeArraySizeException : 배열 생성시 길이를 음수로 지정하는 예외의 발생
ArrayStoreException : 배열에 적절치 않은 인스턴스를 저장하는 예외의 발생

Exception 클래스를 상속하는 예외 클래스들의 특성
코드는 문법적 오류가 아닌, 프로그램 실행 과정에서 발생하는 예외적 상황을 표현하기 위한 클래스들이다. 따라서 예외의 처리를 어떻게 할 것인지 반드시명시해 주어야 한다.












