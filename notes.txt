arr[3]
arr : 배열의 이름은 배열의[0]의 주소값을 지니는 상수이다.

ptr : ㅇㅇ형 포인터 *변수*//변경가능
arr : ㅇㅇ형 포인터 *상수*//변경 불가

포인터로 +- 연산을 할 수 있다.
주소값에 연산을 하면 sizeof(type)만큼 이동한다.

char str[20] = "abcd" //수정가능
char* ptr = "abcd" //수정불가

int* arr[3] = {&num1, &num2, &num3};
int num;
int* ptr= &num;
int **dptr = &ptr;
int*** tptr = &dptr;
*tptr = dptr의 값
tptr = dptr의 주소값
**tptr = ptr의 값
***tptr = num 의 값

void* ptr = malloc(sizeof(type))
malloc 안에 들어가는 sizeof함수는 숫자만 반환하므로 malloc은 
데이터의 type을 알 수가 없다. 결국 malloc앞에 형변환을 통해 형을 지정해 줘야한다.
*malloc은 주소값을 반환한다.
int* ptr = (int*)malloc(sizeof(int));
double* ptr = (double*)malloc(sizeof(double));

---------------------------------------------------------------------------

함수포인터

int sosimple(int n1, int n2){}

int (*fptr)(int, int);
typedef int fptr(int, int);
fptr = sosimple

이런식으로 함수 포인터 선언
fptr(3,4) = sosimple(3,4) 같은 표현이다

----------------------------------------------------------------------------
void 포인터
어떠한 주소 값도 저장이 가능한 void형 포인터
형 정보가 존재하지 않는 포인터 변수이기에 어떠한 주소 값도 저장이 가능하다.
형 정보가 존재하지 않기 때문에 메모리 접근을 위한 * 연산은 불가능하다.

int num=20;
void* ptr;
ptr = &num;
double num=3.0;
ptr = &num;

void SimpleFunc(void);
ptr = SimpleFunc(void);
가능
----------------------------------------------------------------------------

#define vs typedef
#define의 #은 기본적으로 컴파일 되기전에 수행하는 선행처리기이며, define은 치환을 의미한다.

#define limit 500 : 코드전체에서 선행적으로 limit 을 500으로 치환해라!
#define 은 자료형 자체를 선언해 주지는 못한다.
#define limit int 는 잘못된 문장이다.

typedef int limit : int의 자료형을 limit으로 쓰겠다. 자료형을 선언할 수 있다.

-----------------------------------------------------------------------------

Linux 환경(학교에서 사용한것)

컴파일 결과 파일 지정
-o
컴파일 결과로 생성된 모든 실행파일의 이름이 a.out으로 생성된다면 큰 문제가 발생한다. hello.c와 같은 간단한 프로그램 같은경우에는 하나의 소스만 컴파일 한다지만, 하나의 딜게토리에서 여러개의 소스를 컴파일 하게 되면 결국 남는 것은 a.out 하나의 실행파일만 생길 것이기 때문이다.
이런 문제를 해결하기 위해서 gcc에서는 -o 옵션을 제공하여 컴파일 과정에서 만들어지는 실행 파일의 이름을 수정 할 수 있도록 지원한다.
gcc [옵션] [실행파일 이름] [컴파일할 파일]
gcc -o hello hello.c
-c : object파일 생성 .o파일

makefile

hw1a : hw1a.o recta.o
	g++ -o hw1a hw1a.o recta.o
hw1a.o recta.o : recta.h

왼쪽 위의 명령어 입력시 g++명령어 자동 실행

-----------------------------------------------------------------------------

gcc : 통합 컴파일러
g++ : c++ 컴파일러
cc : c 컴파일러

<file 복사>
cp f1 f2

<file 제거>
rm -rf f1
rm -rf f1* : f1로 시작하는 모든 파일 제거
-rf : 묻지 말고 제거(recursive force)

<file 이름 바꾸기>
mv f1 f2

<파일의 앞이나 뒤 일부분을 출력하기>
head f1 : file 의 앞 부분 10줄을 출력
tail f1 : file 의 뒷 부분 10줄을 출력
-n(-5) : n줄 출력
ex) head -5 f1

<redirection>
prog < f1 표준입력을 키보드 대신 f1에서 받는다.
prog > f2 표준출력을 화면대신 f2로 내보낸다.

<makefile 사용법>
가령 aa.cpp 와 bb.cpp의 두 개의 file이 있다. main함수는 bb.cpp에 들어 있다. 동작 가능한 프로그램 bm을 만들자.
main 함수를 가지고 있는 cm.cpp을 컴파일/링크 하여 동작 가능한 프로그램 cm을 만들자

방법1)
g++ -o bm bb.cpp aa.cpp
g++ -o cm cm.cpp

방법2)
1. 일단 다음과 같은 내용의 파일 makefile을 제작한다.
bm : bb.o aa.o
	g++ -o bm bb.o aa.o
cm : cm.o
	g++ -o cm cm.o
//makefile 내의 의존성은 분리컴파일 된 .o 파일을 이용하면 됨.
2. 'make' 또는 'make bm' 하면 bm이 제작된다.
'make cm' 하면 cm' 이 제작된다.


----------------------------------------------------------------------------
vi편집기 사용법

i : 현 커서 전 위치부터 입력된다(insert)
a : 현 커서 다음 위치부터 입력된다(add)
o : 현 커서 위치 다음 줄에 입력된다(open)
0 : 현 커서 위치 전 줄에 입력된다.
x : 한 문자 삭제
dd : 현재 줄 삭제(line delete)
ndd : n개의 줄 삭제(line delete) 
	5dd //현재 줄부터 5줄 삭제
ZZ(:wq) : file 저장후 vi 벗어남.
:w file : file(생략시 현재 이름으로) 저장(write) 한다.
	주의	w대신 w!로 사용하면 덮어쓰기를 함
:n, mw file : 줄 n에서 m까지를 파일 file에 저장(write)한다.
	예	:3, 7w! tmp1  : line 3-7을 tmp1에 저장한다.
	참고	m대신 $을 사용하면 마지막 줄을 의미
:n, mmp file : 줄n에서 m까지를 p째줄 다음으로 옮기시오(move)
	예	:3, 7m15
:n, ms/some/any/g : 줄 n~m에서 some을 모두 any로 바꾸시오
	예	:3, 7s/pretty/big/g : line 3~7에서 pretty 를 big으로 바꾸시오
		:1, $s/pretty/big/g : 프로그램 전체에서 pretty를 big으로 바꾸시오
:j : 다음 줄을 현재 줄 뒤에 붙여(join) 한 줄로 만든다.
:r file : file이란 파일을 커서 다음 줄로 읽어 들인다(read)
:q : vi를 벗어난다(quit)
:q! : 저장하지 않고 vi를 벗어난다.
:set number : 줄번호가 표시된다.
커서으 이동 : h(좌), j(아래), k(위), l(우)

------------------------------------------------------------------------------

부호 표시
cout<<showpos;
해제
cout.unsetff(ios_base::showpos);


-----------------------------------------------------------------------------
